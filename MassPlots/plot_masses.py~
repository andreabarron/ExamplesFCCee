#! /usr/bin/env python3
#
# 1) Setup ROOT with: 
#   "source /cvmfs/sft.cern.ch/lcg/views/LCG_99/x86_64-centos7-gcc8-opt/setup.sh"
# 2) Run this script as:
#   "python -i [python_script]"
#

#hay que arreglar el código porq me da problemas, no me sale


import os, sys, math
import ROOT
import multiprocessing

import tdrstyle

from ROOT import *

# CMS Style (estilo para los plots)
tdrstyle.setTDRStyle()

# Proceso que vamos a estudiar
#sampleName="eeHZ"

# Archivo de entrada
fHZ = TFile('/afs/ciemat.es/user/a/alcaraz/public/FCCee/eeHZ_skimmed_reduced.root')
fWW = TFile('/afs/ciemat.es/user/a/alcaraz/public/FCCee/eeWW_skimmed_reduced.root')
fZZ = TFile('/afs/ciemat.es/user/a/alcaraz/public/FCCee/eeZZ_skimmed_reduced.root')

# Este rootfile tiene un 'tree' llamado events que vamos a
# convertir en un dataframe para analizarlo: 
print("\nProcessing file '%s'..." % (fHZ))
dfHZ = ROOT.RDataFrame("events",fHZ)

print("\nProcessing file '%s'..." % (fWW))
dfWW = ROOT.RDataFrame("events",fWW)

print("\nProcessing file '%s'..." % (fZZ))
dfZZ = ROOT.RDataFrame("events",fZZ)

#cs = 240 # (GeV) es la sección eficaz (cross section)

## PRIMER ARCHIVO HZ ##

# Vamos a ver cuantos muones hay en cada suceso:
# Dibujemos las variables con Histo1D( ("nombre","titulo;ejeX;ejeY", bines, minX,maxX) ,
# "columna/rama")
hNMuonsHZ = dfHZ.Histo1D(("hNMuonsHZ", "Muones Por Suceso ;N_{#mu};N_{Events}",10,0,10), "NMuon")

# Podemos filtrar la muestra para seleccionar parte de
# los sucesos (df.Filter( Seleccion, Explicacion) 
# Por ejemplo, vamos a fijarnos solo en los sucesos con dos muones: 
dfMuonsHZ = dfHZ.Filter("NMuon == 2", "Events with exactly two muons")

# Tambien podemos annadir variables. 
# Dada la geometria del detector es comodo trabajar en cilindricas 
# en vez de cartesianas: vamos a definir el momento del muon en el plano transverso y
# annadirlo al dataframe: 
dfMuonsHZ = dfMuonsHZ.Define("Muon_ptHZ","sqrt( pow(Muon_px,2)+pow(Muon_py,2) ) ")
dfMuonsHZ = dfMuonsHZ.Define("Muon_energyHZ","sqrt(pow(Muon_mass,2)+(pow(Muon_px,2)+pow(Muon_py,2)+pow(Muon_pz,2)))")
dfMuonsHZ = dfMuonsHZ.Define("Z_massHZ", "sqrt( 2*pow(Muon_mass,2) - 2*((Muon_px[0])*(Muon_px[1]) + (Muon_py[0])*(Muon_py[1]) + (Muon_pz[0])*(Muon_pz[1])) + 2*(sqrt(pow(Muon_mass,2) + pow(Muon_px[0],2) + pow(Muon_py[0],2) + pow(Muon_pz[0],2)))*(sqrt(pow(Muon_mass,2) + pow(Muon_px[1],2) + pow(Muon_py[1],2) + pow(Muon_pz[1],2))))")
#dfMuonsHZ = dfMuonsHZ.Define("Z_massHZ_norm","Z_massHZ/240")

# Vamos a volver a imprimir sucesos: ahora puedes ver que esta ahi el Pt
#dfMuons.Display({"Muon_px","Muon_py","Muon_pz","Muon_pt","Muon_charge"},10 ).Print()

dfMuonsHZ = dfMuonsHZ.Filter("Muon_ptHZ[0] > 20 && Muon_ptHZ[1] > 20", "Pt mayores que 20 GeV")


# Cuantos sucesos sobreviven a este corte?
report = dfMuonsHZ.Report()
report.Print()

# Dibujemos las variables con Histo1D( ("nombre","titulo;ejeX;ejeY", bines, minX,maxX) , "columna")
hAllMuonsHZPx = dfMuonsHZ.Histo1D(("hAllMuonsHZPx", "MuonPx ; p_{x} (#mu) (GeV) ; N_{Events}", 100,-100,100), "Muon_px")
hAllMuonsHZPt = dfMuonsHZ.Histo1D(("hAllMuonsHZPt", "MuonPt ; p_{T} (#mu) (GeV);N_{Events}", 100,0,100), "Muon_ptHZ")
hAllMuonsHZCharge = dfMuonsHZ.Histo1D(("hAllMuonsHZCharge", "MuonCharge ; Muon or AntiMuon?;N_{Events}",5,-2,2), "Muon_charge")
hAllMuonsHZEnergy = dfMuonsHZ.Histo1D(("hAllMuonsHZEnergy", "MuonEnergy ; E (GeV) ; N_{Events}", 100,0,100), "Muon_energyHZ")

hZmassHZ = dfMuonsHZ.Histo1D(("hZmassHZ", "Zmass ; m_{Z} (GeV) ; N_{Events}", 100,60,120), "Z_massHZ")
#hZmassHZnorm = dfMuonsHZ.Histo1D(("hZmassHZnorm","Zmass normalizada ; m_{Z} (GeV) ; N_{Events}", 100,60,120), "Z_massHZnorm")

# Por ultimo pintamos las graficas:
#c1 = ROOT.TCanvas("c1","HZ analysis canvas", 1024, 768)


## SEGUNDO ARCHIVO WW ##

# Vamos a ver cuantos muones hay en cada suceso:
# Dibujemos las variables con Histo1D( ("nombre","titulo;ejeX;ejeY", bines, minX,maxX) ,
# "columna/rama")
hNMuonsWW = dfWW.Histo1D(("hNMuonsWW", "Muones Por Suceso ;N_{#mu};N_{Events}",10,0,10), "NMuon")

# Podemos filtrar la muestra para seleccionar parte de
# los sucesos (df.Filter( Seleccion, Explicacion) 
# Por ejemplo, vamos a fijarnos solo en los sucesos con dos muones: 
dfMuonsWW = dfWW.Filter("NMuon == 2", "Events with exactly two muons")

# Tambien podemos annadir variables. 
# Dada la geometria del detector es comodo trabajar en cilindricas 
# en vez de cartesianas: vamos a definir el momento del muon en el plano transverso y
# annadirlo al dataframe: 
dfMuonsWW = dfMuonsWW.Define("Muon_ptWW","sqrt( pow(Muon_px,2)+pow(Muon_py,2) ) ")
dfMuonsWW = dfMuonsWW.Define("Muon_energyWW","sqrt(pow(Muon_mass,2)+(pow(Muon_px,2)+pow(Muon_py,2)+pow(Muon_pz,2)))")
dfMuonsWW = dfMuonsWW.Define("Z_massWW", "sqrt( 2*pow(Muon_mass,2) - 2*((Muon_px[0])*(Muon_px[1]) + (Muon_py[0])*(Muon_py[1]) + (Muon_pz[0])*(Muon_pz[1])) + 2*(sqrt(pow(Muon_mass,2) + pow(Muon_px[0],2) + pow(Muon_py[0],2) + pow(Muon_pz[0],2)))*(sqrt(pow(Muon_mass,2) + pow(Muon_px[1],2) + pow(Muon_py[1],2) + pow(Muon_pz[1],2))))")
#dfMuonsWW = dfMuonsWW.Define("Z_massWW_norm","Z_massWW/240")

# Vamos a volver a imprimir sucesos: ahora puedes ver que esta ahi el Pt
#dfMuons.Display({"Muon_px","Muon_py","Muon_pz","Muon_pt","Muon_charge"},10 ).Print()

dfMuonsWW = dfMuonsWW.Filter("Muon_ptWW[0] > 20 && Muon_ptWW[1] > 20", "Pt mayores que 20 GeV")


# Cuantos sucesos sobreviven a este corte?
report = dfMuonsWW.Report()
report.Print()

# Dibujemos las variables con Histo1D( ("nombre","titulo;ejeX;ejeY", bines, minX,maxX) , "columna")
hAllMuonsWWPx = dfMuonsWW.Histo1D(("hAllMuonsWWPx", "MuonPx ; p_{x} (#mu) (GeV) ; N_{Events}", 100,-100,100), "Muon_px")
hAllMuonsWWPt = dfMuonsWW.Histo1D(("hAllMuonsWWPt", "MuonPt ; p_{T} (#mu) (GeV);N_{Events}", 100,0,100), "Muon_ptWW")
hAllMuonsWWCharge = dfMuonsWW.Histo1D(("hAllMuonsWWCharge", "MuonCharge ; Muon or AntiMuon?;N_{Events}",5,-2,2), "Muon_charge")
hAllMuonsWWEnergy = dfMuonsWW.Histo1D(("hAllMuonsWWEnergy", "MuonEnergy ; E (GeV) ; N_{Events}", 100,0,100), "Muon_energyWW")

hZmassWW = dfMuonsWW.Histo1D(("hZmassWW", "Zmass ; m_{Z} (GeV) ; N_{Events}", 100,60,120), "Z_massWW")
#hZmassWWnorm = dfMuonsWW.Histo1D(("hZmassWW_norm","Zmass normalizada ; m_{Z} (GeV) ; N_{Events}", 100,60,120), "Z_massWW_norm")

# Por ultimo pintamos las graficas:
#c2 = ROOT.TCanvas("c2","ww analysis canvas", 1024, 768)



## TERCER ARCHIVO ZZ ##

# Vamos a ver cuantos muones hay en cada suceso:
# Dibujemos las variables con Histo1D( ("nombre","titulo;ejeX;ejeY", bines, minX,maxX) ,
# "columna/rama")
hNMuonsZZ = dfZZ.Histo1D(("hNMuonsZZ", "Muones Por Suceso ;N_{#mu};N_{Events}",10,0,10), "NMuon")

# Podemos filtrar la muestra para seleccionar parte de
# los sucesos (df.Filter( Seleccion, Explicacion) 
# Por ejemplo, vamos a fijarnos solo en los sucesos con dos muones: 
dfMuonsZZ = dfZZ.Filter("NMuon == 2", "Events with exactly two muons")

# Tambien podemos annadir variables. 
# Dada la geometria del detector es comodo trabajar en cilindricas 
# en vez de cartesianas: vamos a definir el momento del muon en el plano transverso y
# annadirlo al dataframe: 
dfMuonsZZ = dfMuonsZZ.Define("Muon_ptZZ","sqrt( pow(Muon_px,2)+pow(Muon_py,2) ) ")
dfMuonsZZ = dfMuonsZZ.Define("Muon_energyZZ","sqrt(pow(Muon_mass,2)+(pow(Muon_px,2)+pow(Muon_py,2)+pow(Muon_pz,2)))")
dfMuonsZZ = dfMuonsZZ.Define("Z_massZZ", "sqrt( 2*pow(Muon_mass,2) - 2*((Muon_px[0])*(Muon_px[1]) + (Muon_py[0])*(Muon_py[1]) + (Muon_pz[0])*(Muon_pz[1])) + 2*(sqrt(pow(Muon_mass,2) + pow(Muon_px[0],2) + pow(Muon_py[0],2) + pow(Muon_pz[0],2)))*(sqrt(pow(Muon_mass,2) + pow(Muon_px[1],2) + pow(Muon_py[1],2) + pow(Muon_pz[1],2))))")
#dfMuonsZZ = dfMuonsZZ.Define("Z_massZZ_norm","Z_massZZ/240")

# Vamos a volver a imprimir sucesos: ahora puedes ver que esta ahi el Pt
#dfMuons.Display({"Muon_px","Muon_py","Muon_pz","Muon_pt","Muon_charge"},10 ).Print()

dfMuonsZZ = dfMuonsZZ.Filter("Muon_ptZZ[0] > 20 && Muon_ptZZ[1] > 20", "Pt mayores que 20 GeV")


# Cuantos sucesos sobreviven a este corte?
report = dfMuonsZZ.Report()
report.Print()

# Dibujemos las variables con Histo1D( ("nombre","titulo;ejeX;ejeY", bines, minX,maxX) , "columna")
hAllMuonsZZPx = dfMuonsZZ.Histo1D(("hAllMuonsZZPx", "MuonPx ; p_{x} (#mu) (GeV) ; N_{Events}", 100,-100,100), "Muon_px")
hAllMuonsZZPt = dfMuonsZZ.Histo1D(("hAllMuonsZZPt", "MuonPt ; p_{T} (#mu) (GeV);N_{Events}", 100,0,100), "Muon_ptZZ")
hAllMuonsZZCharge = dfMuonsZZ.Histo1D(("hAllMuonsZZCharge", "MuonCharge ; Muon or AntiMuon?;N_{Events}",5,-2,2), "Muon_charge")
hAllMuonsZZEnergy = dfMuonsZZ.Histo1D(("hAllMuonsZZEnergy", "MuonEnergy ; E (GeV) ; N_{Events}", 100,0,100), "Muon_energyZZ")

hZmassZZ = dfMuonsZZ.Histo1D(("hZmassZZ", "Zmass ; m_{Z} (GeV) ; N_{Events}", 100,60,120), "Z_massZZ")
#hZmassZZnorm = dfMuonsZZ.Histo1D(("hZmassZZ_norm","Zmass normalizada ; m_{Z} (GeV) ; N_{Events}", 100,60,120), "Z_massZZ_norm")

# Por ultimo pintamos las graficas:
c1 = ROOT.TCanvas("c1","HZ, WW y ZZ analysis canvas", 1024, 768)
c2 = ROOT.TCanvas("c2","HZ, WW y ZZ analysis canvas", 1024, 768)

#Ahora vamos a pintar las 3 masas en la misma gráfica

hZmassHZ.Draw("")
hZmassWW.Draw("sames")
hZmassZZ.Draw("sames")
hZmassHZ.SetLineColor(kRed)
hZmassWW.SetLineColor(kBlue)
hZmassZZ.SetLineColor(kGreen)
#legend = ROOT.TLegend(0.2,0.7,0.48,0.9)
#entry=legend.AddEntry(hZmassHZ,"HZ","l")
#entry=legend.AddEntry(hZmassWW,"WW","l")
#entry=legend.AddEntry(hZmassZZ,"ZZ","l")
#legend.Draw()

output_png = "masaZ.png"           #"Masa del Z para los canales HZ, WW y ZZ"

c1.SaveAs(output_png)

input("File '%s' already saved; press ENTER in this window when ready to close thisca canvas ... " % (output_png))


out = ROOT.TFile("histos.root","RECREATE")   #guardamos los histogramas en un archivo ROOT (se corre aquí, pero se pinta en el código "pintar.py")
out.cd()

hZmassHZ.Write()
hZmassWW.Write()
hZmassZZ.Write()


#Hacemos lo mismo pero con las masas normalizadas al área

#hZmassHZ_norm.Scale(1./240)
#hZmassHZ_norm.Scale(1./240)
#hZmassHZ_norm.Scale(1./240)

hZmassHZnorm = hZmassHZ.Clone("")
#dfMuonsHZ = dfMuonsHZ.Define("hZmassHZnorm","Z_massHZnorm")           #"hZmassHZ.Clone("")")
hZmassHZnorm.Scale(1. / hZmassHZnorm.Integral(), "width")
#hZmassHZnorm = hZmassHZ.Clone("")
#hZmassHZnorm.Scale(1. / hZmassHZnorm.Integral(), "width")

hZmassWWnorm = hZmassWW.Clone("")
#dfMuonsWW = dfMuonsWW.Define("hZmassWWnorm","Z_massWWnorm")           #"hZmassHZ.Clone("")")
hZmassWWnorm.Scale(1. / hZmassWWnorm.Integral(), "width")
#hZmassWWnorm = hZmassWW.Clone("")
#hZmassWWnorm.Scale(1. / hZmassWWnorm.Integral(), "width")  #hZmassWW_norm.Integral()

hZmassZZnorm = hZmassZZ.Clone("")
#dfMuonsZZ = dfMuonsZZ.Define("hZmassZZnorm","Z_massZZnorm")           #"hZmassHZ.Clone("")")
hZmassZZnorm.Scale(1. / hZmassZZnorm.Integral(), "width")
#hZmassZZnorm = hZmassZZ.Clone("")
#hZmassZZnorm.Scale(1. /hZmassZZnorm.Integral(), "width")   #hZmassWW_norm.Integral()


hZmassHZnorm.Draw("")
hZmassWWnorm.Draw("sames")
hZmassZZnorm.Draw("sames")



output_png = "masaZ_norm.png"           #"Masa del Z para los canales HZ, WW y ZZ"

c2.SaveAs(output_png)

input("File '%s' already saved; press ENTER in this window when ready to close thisca canvas ... " % (output_png))

#guardamos los histogramas en un archivo ROOT (se corre aquí, pero se pinta en el código "pintar.py")
out = ROOT.TFile("histos_norm.root","RECREATE")   
out.cd()

#hZmassHZnorm.Write()
#hZmassWWnorm.Write()
#hZmassZZnorm.Write()


#Hacemos lo mismo pero con las masas normalizadas a la sección eficaz --> ESTO ESTÁ MAL

#hZmassHZ_norm.Draw("")
#hZmassWW_norm.Draw("sames")
#hZmassZZ_norm.Draw("sames")
#hZmassHZ_norm.SetLineColor(kRed)
#hZmassWW_norm.SetLineColor(kBlue)
#hZmassZZ_norm.SetLineColor(kGreen)
#legend = ROOT.TLegend(0.2,0.7,0.48,0.9)
#entry=legend.AddEntry(hZmassHZ,"HZ","l")
#entry=legend.AddEntry(hZmassWW,"WW","l")
#entry=legend.AddEntry(hZmassZZ,"ZZ","l")
#legend.Draw()

#output_png = "masaZ_norm.png"           #"Masa del Z para los canales HZ, WW y ZZ"

#c2.SaveAs(output_png)

#input("File '%s' already saved; press ENTER in this window when ready to close thisca canvas ... " % (output_png))


#out = ROOT.TFile("histos_norm.root","RECREATE")   #guardamos los histogramas en un archivo ROOT (se corre aquí, pero se pinta en el código "pintar.py")
#out.cd()

#hZmassHZ_norm.Write()
#hZmassWW_norm.Write()
#hZmassZZ_norm.Write()













